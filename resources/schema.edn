{:enums
 {
  :ContinuousTreeStatus {:values [
                                  :TREE_UPLOADED
                                  :ATTRIBUTES_AND_HPD_LEVELS_PARSED
                                  :PARSER_ARGUMENTS_SET

                                  ;; :QUEUED
                                  ;; :RUNNING
                                  ;; :SUCCEEDED

                                  :ERROR
                                  ]}}

 :input-objects
 {:File {:fields {:name {:type String}
                  :extension {:type String}}}
  }

 :objects
 {:ContinuousTreeParserStatus {:description "Return id and status. Mostly for querying the workers progress but also for kicking off new analysis."
                               :fields {:id {:type (non-null ID)}
                                        :status {:type (non-null :ContinuousTreeStatus)}}}

  :ContinuousTree {:description "Represents ContinuousTree entity."
                   :fields {:id {:description "Unique identifier."
                                 :type (non-null ID)}
                            :userId {:type (non-null ID)}
                            :readableName {:description "Human-readable name. Usually tree file name."
                                           :type String}
                            :treeFileUrl {:type (non-null String)}
                            :xCoordinateAttributeName {:type String}
                            :yCoordinateAttributeName {:type String}
                            :hpdLevel {:type String}
                            :hasExternalAnnotations {:type Boolean}
                            :timescaleMultiplier {:type Float}
                            :mostRecentSamplingDate {:type String}
                            :status {:type :ContinuousTreeStatus
                                     :resolver :resolve/continuous-tree->status}
                            :attributeNames {:type (list String)
                                             :resolve :resolve/continuous-tree->attributes}
                            :hpdLevels {:type (list String)
                                        :resolve :resolve/continuous-tree->hpd-levels}
                            :outputFileUrl {:type String}}}

  }

 :queries
 {:getContinuousTreeParserStatus {:type :ContinuousTreeParserStatus
                                  :description "Returns a current status of analysis execution."
                                  :args {:id {:type (non-null ID)}}
                                  :resolve :query/getContinuousTreeParserStatus}

  :getContinuousTree {:type :ContinuousTree
                      :description "Returns a ContinuousTree entity by id."
                      :args {:id {:type (non-null ID)}}
                      :resolve :query/getContinuousTree}

  }

 :mutations
 {:getUploadUrls {:type (list String)
                  :description "Returns one-time POST urls."
                  :args {:files {:type (list :File)}}
                  :resolve :mutation/getUploadUrls}

  :uploadContinuousTree {:type :ContinuousTreeParserStatus
                         :description "Persists continuous tree. Returns a ParserStatus with id for querying the status."
                         :args {:readableName {:type String}
                                :treeFileUrl {:type (non-null String)}}
                         :resolve :mutation/uploadContinuousTree}

  :updateContinuousTree {:type :ContinuousTreeParserStatus
                         :description "Updates the entity with attributes for parsing the tree graph"
                         :args {:id {:type (non-null ID)}
                                :xCoordinateAttributeName {:type (non-null String)}
                                :yCoordinateAttributeName {:type (non-null String)}
                                :hpdLevel {:type (non-null String)}
                                :hasExternalAnnotations {:type String}
                                :timescaleMultiplier {:type String}
                                :mostRecentSamplingDate {:type (non-null String)}}
                         :resolve :mutation/updateContinuousTree}

  :startContinuousTreeParser {:type :ContinuousTreeParserStatus
                              :description "Starts executing a parser. Returns a ParserStatus with id for querying the status."
                              :args {:id {:type (non-null ID)}}
                              :resolve :mutation/startContinuousTreeParser}

  }

 }
